{"ast":null,"code":"import _objectSpread from \"/Users/niharika.singh/Downloads/react-websocket-stock-app-master/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport moment from 'moment';\nvar TIME_DIFFERENCE = 3;\n\nvar StockListReducer = function StockListReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'UPDATE':\n      var newList = JSON.parse(action.payload).reduce(function (stocks, stock) {\n        var flag = 'neutral';\n        var timestamp = moment();\n        var timeString = timestamp.format('YYYY-MM-DD HH:mm:ss');\n        var duration;\n        var objInState = state[stock[0]];\n\n        if (objInState && objInState.price > stock[1]) {\n          flag = \"negative\"; // Ideally, moment fromNow() should be used to get real time time difference between updates, and can be optimized with reusable function\n\n          duration = moment.duration(moment(new Date()).diff(objInState.timestamp));\n\n          if (duration.asSeconds() < TIME_DIFFERENCE) {\n            timeString = 'a seconds ago';\n          } else {\n            timeString = objInState.timestamp.format('YYYY-MM-DD HH:mm:ss');\n          }\n\n          timestamp = moment();\n        } else if (objInState && objInState.price < stock[1]) {\n          flag = \"positive\";\n          duration = moment.duration(moment(new Date()).diff(objInState.timestamp));\n\n          if (duration.asSeconds() < TIME_DIFFERENCE) {\n            timeString = 'a seconds ago';\n          } else {\n            timeString = objInState.timestamp.format('YYYY-MM-DD HH:mm:ss');\n          }\n\n          timestamp = moment();\n        }\n\n        stocks[stock[0]] = {\n          name: stock[0],\n          price: stock[1],\n          flag: flag,\n          timestamp: timestamp,\n          timeString: timeString\n        };\n        return stocks;\n      }, {});\n\n      var updatedList = _objectSpread({}, state, newList);\n\n      return updatedList;\n\n    default:\n      return state;\n  }\n};\n\nexport default StockListReducer;","map":{"version":3,"sources":["/Users/niharika.singh/Downloads/react-websocket-stock-app-master/src/reducers/StockList/StockListReducer.js"],"names":["moment","TIME_DIFFERENCE","StockListReducer","state","action","type","newList","JSON","parse","payload","reduce","stocks","stock","flag","timestamp","timeString","format","duration","objInState","price","Date","diff","asSeconds","name","updatedList"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,IAAMC,eAAe,GAAG,CAAxB;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,QAAL;AACI,UAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWJ,MAAM,CAACK,OAAlB,EAA2BC,MAA3B,CAAkC,UAACC,MAAD,EAASC,KAAT,EAAmB;AACjE,YAAIC,IAAI,GAAG,SAAX;AACA,YAAIC,SAAS,GAAGd,MAAM,EAAtB;AACA,YAAIe,UAAU,GAAGD,SAAS,CAACE,MAAV,CAAiB,qBAAjB,CAAjB;AACA,YAAIC,QAAJ;AACA,YAAIC,UAAU,GAAGf,KAAK,CAACS,KAAK,CAAC,CAAD,CAAN,CAAtB;;AACA,YAAIM,UAAU,IAAIA,UAAU,CAACC,KAAX,GAAmBP,KAAK,CAAC,CAAD,CAA1C,EAA+C;AAC3CC,UAAAA,IAAI,GAAG,UAAP,CAD2C,CAE3C;;AACAI,UAAAA,QAAQ,GAAGjB,MAAM,CAACiB,QAAP,CAAgBjB,MAAM,CAAC,IAAIoB,IAAJ,EAAD,CAAN,CAAmBC,IAAnB,CAAwBH,UAAU,CAACJ,SAAnC,CAAhB,CAAX;;AACA,cAAIG,QAAQ,CAACK,SAAT,KAAuBrB,eAA3B,EAA4C;AACxCc,YAAAA,UAAU,GAAG,eAAb;AACH,WAFD,MAEO;AACHA,YAAAA,UAAU,GAAGG,UAAU,CAACJ,SAAX,CAAqBE,MAArB,CAA4B,qBAA5B,CAAb;AACH;;AACDF,UAAAA,SAAS,GAAGd,MAAM,EAAlB;AACH,SAVD,MAUO,IAAIkB,UAAU,IAAIA,UAAU,CAACC,KAAX,GAAmBP,KAAK,CAAC,CAAD,CAA1C,EAA+C;AAClDC,UAAAA,IAAI,GAAG,UAAP;AACAI,UAAAA,QAAQ,GAAGjB,MAAM,CAACiB,QAAP,CAAgBjB,MAAM,CAAC,IAAIoB,IAAJ,EAAD,CAAN,CAAmBC,IAAnB,CAAwBH,UAAU,CAACJ,SAAnC,CAAhB,CAAX;;AACA,cAAIG,QAAQ,CAACK,SAAT,KAAuBrB,eAA3B,EAA4C;AACxCc,YAAAA,UAAU,GAAG,eAAb;AACH,WAFD,MAEO;AACHA,YAAAA,UAAU,GAAGG,UAAU,CAACJ,SAAX,CAAqBE,MAArB,CAA4B,qBAA5B,CAAb;AACH;;AACDF,UAAAA,SAAS,GAAGd,MAAM,EAAlB;AACH;;AAEDW,QAAAA,MAAM,CAACC,KAAK,CAAC,CAAD,CAAN,CAAN,GAAmB;AAAEW,UAAAA,IAAI,EAAEX,KAAK,CAAC,CAAD,CAAb;AAAkBO,UAAAA,KAAK,EAAEP,KAAK,CAAC,CAAD,CAA9B;AAAmCC,UAAAA,IAAI,EAAJA,IAAnC;AAAyCC,UAAAA,SAAS,EAATA,SAAzC;AAAoDC,UAAAA,UAAU,EAAVA;AAApD,SAAnB;AACA,eAAOJ,MAAP;AACH,OA7Be,EA6Bb,EA7Ba,CAAhB;;AA8BA,UAAMa,WAAW,qBAAQrB,KAAR,EAAkBG,OAAlB,CAAjB;;AACA,aAAOkB,WAAP;;AAEJ;AACI,aAAOrB,KAAP;AApCR;AAuCH,CAxCD;;AA0CA,eAAeD,gBAAf","sourcesContent":["import moment from 'moment';\n\nconst TIME_DIFFERENCE = 3;\nconst StockListReducer = (state = {}, action) => {\n    switch (action.type) {\n        case 'UPDATE':\n            const newList = JSON.parse(action.payload).reduce((stocks, stock) => {\n                let flag = 'neutral';\n                let timestamp = moment();\n                let timeString = timestamp.format('YYYY-MM-DD HH:mm:ss');\n                let duration;\n                let objInState = state[stock[0]];\n                if (objInState && objInState.price > stock[1]) {\n                    flag = \"negative\";\n                    // Ideally, moment fromNow() should be used to get real time time difference between updates, and can be optimized with reusable function\n                    duration = moment.duration(moment(new Date()).diff(objInState.timestamp))\n                    if (duration.asSeconds() < TIME_DIFFERENCE) {\n                        timeString = 'a seconds ago'\n                    } else {\n                        timeString = objInState.timestamp.format('YYYY-MM-DD HH:mm:ss')\n                    }\n                    timestamp = moment();\n                } else if (objInState && objInState.price < stock[1]) {\n                    flag = \"positive\";\n                    duration = moment.duration(moment(new Date()).diff(objInState.timestamp))\n                    if (duration.asSeconds() < TIME_DIFFERENCE) {\n                        timeString = 'a seconds ago'\n                    } else {\n                        timeString = objInState.timestamp.format('YYYY-MM-DD HH:mm:ss')\n                    }\n                    timestamp = moment();\n                }\n\n                stocks[stock[0]] = { name: stock[0], price: stock[1], flag, timestamp, timeString };\n                return stocks\n            }, {});\n            const updatedList = { ...state, ...newList };\n            return updatedList;\n\n        default:\n            return state;\n\n    }\n}\n\nexport default StockListReducer;"]},"metadata":{},"sourceType":"module"}